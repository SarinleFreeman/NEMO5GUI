# Generated by Django 5.0.7 on 2024-08-14 06:46

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('domains', '0001_initial'),
        ('regions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EMSchrodingerFEM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('type', models.CharField(choices=[('NonlinearPoissonFEM', 'NonlinearPoissonFEM'), ('EMSchrodingerFEM', 'EMSchrodingerFEM'), ('SemiclassicalFEM', 'SemiclassicalFEM')], max_length=100)),
                ('_disable_output', models.BooleanField(default=False)),
                ('_search_flag', models.IntegerField(default=2)),
                ('_trigger_flag', models.IntegerField(default=4)),
                ('eigensolver', models.CharField(choices=[('lanczos', 'Lanczos'), ('krylovschur', 'Krylov-Schur'), ('arnoldi', 'Arnoldi'), ('power', 'Power'), ('lapack', 'LAPACK'), ('subspace', 'Subspace'), ('arpack', 'ARPACK'), ('feast', 'FEAST'), ('magma', 'MAGMA'), ('jd', 'JD'), ('gd', 'GD')], default='krylovschur', help_text='Type of eigensolver to use.', max_length=50)),
                ('spectrum_position', models.CharField(choices=[('smallest_magnitude', 'Smallest Magnitude'), ('largest_magnitude', 'Largest Magnitude'), ('largest_real', 'Largest Real'), ('smallest_real', 'Smallest Real'), ('largest_imaginary', 'Largest Imaginary'), ('smallest_imaginary', 'Smallest Imaginary')], default='smallest_magnitude', help_text='Position in the spectrum for which eigenvalues are sought.', max_length=50)),
                ('number_of_eigenvalues', models.IntegerField(default=5, help_text='Number of eigenvalues to compute.', validators=[django.core.validators.MinValueValidator(1)])),
                ('max_linear_solver_iterations', models.IntegerField(default=3000, help_text='Maximum number of iterations for the linear solver.', validators=[django.core.validators.MinValueValidator(1)])),
                ('linear_solver_tolerance', models.FloatField(default=1e-12, help_text='Tolerance for the linear solver.', validators=[django.core.validators.MinValueValidator(0)])),
                ('potential_solver', models.CharField(help_text='Solver to use for the potential field.', max_length=100)),
                ('temperature', models.FloatField(default=1, help_text='Simulation temperature.', validators=[django.core.validators.MinValueValidator(0)])),
                ('chemical_potential', models.FloatField(default=0.64, help_text='Chemical potential.')),
                ('B_field', models.FloatField(default=0, help_text='External magnetic field strength.')),
                ('g_factor', models.FloatField(default=0, help_text='g-factor for the material.')),
                ('finite_element_family', models.CharField(default='lagrange', help_text='Finite element family used in the simulation.', max_length=50)),
                ('finite_element_order', models.IntegerField(default=1, help_text='Order of the finite elements used.', validators=[django.core.validators.MinValueValidator(1)])),
                ('FEM_integration_order', models.IntegerField(default=3, help_text='Integration order for the finite element method.', validators=[django.core.validators.MinValueValidator(1)])),
                ('use_density_interpolation', models.BooleanField(default=False, help_text='Whether to use density interpolation in the simulation.')),
                ('integrate_density', models.BooleanField(default=True, help_text='Whether to integrate the density in the simulation.')),
                ('use_exchange_potential', models.BooleanField(default=False, help_text='Whether to use exchange potential.')),
                ('use_multiple_variables_for_spin_valley', models.BooleanField(default=False, help_text='Whether to use multiple variables for spin and valley.')),
                ('max_refinement_iterations', models.IntegerField(default=0, help_text='Maximum number of refinement iterations.', validators=[django.core.validators.MinValueValidator(0)])),
                ('max_refinement_level', models.IntegerField(default=5, help_text='Maximum level of mesh refinement.', validators=[django.core.validators.MinValueValidator(0)])),
                ('refine_fraction', models.FloatField(default=0.9, help_text='Fraction of elements to refine.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('coarsen_fraction', models.FloatField(default=0, help_text='Fraction of elements to coarsen.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('print_energy_levels', models.BooleanField(default=True, help_text='Whether to print energy levels.')),
                ('print_num_electrons_under_Ef', models.BooleanField(default=True, help_text='Whether to print the number of electrons under the Fermi energy.')),
                ('output_file_suffix', models.CharField(blank=True, help_text='Suffix for output files.', max_length=100)),
                ('ksp_type', models.CharField(default='preonly', help_text='Type of Krylov subspace solver to use.', max_length=50)),
                ('pc_type', models.CharField(choices=[('lu', 'LU Decomposition'), ('gamg', 'Geometric Algebraic Multigrid')], default='lu', help_text='Type of eigenpreconditionersolver to use.', max_length=50)),
                ('linear_solver_family', models.CharField(default='mumps', help_text='Family of linear solvers to use.', max_length=50)),
                ('tolerance', models.FloatField(default=1e-12, help_text='Tolerance for computations.', validators=[django.core.validators.MinValueValidator(0)])),
                ('valley', models.CharField(default='gamma', help_text='Valley type.', max_length=50)),
                ('valley_degeneracy', models.IntegerField(default=-1, help_text='Degeneracy of the valley.')),
                ('valley_splitting', models.FloatField(default=0, help_text='Energy splitting between valleys.')),
                ('ll_width_to_splitting_ratio', models.FloatField(default=0.05, help_text='Ratio of Landau level width to valley splitting.')),
                ('longitudinal_effective_mass_direction', models.CharField(default='X', help_text='Direction of longitudinal effective mass.', max_length=1)),
                ('quadrature_rule', models.CharField(default='gauss', help_text='Quadrature rule used for numerical integration.', max_length=50)),
                ('number_of_basis_vectors', models.IntegerField(default=20, help_text='Number of basis vectors to use.', validators=[django.core.validators.MinValueValidator(1)])),
                ('predictor_type', models.CharField(blank=True, help_text='Type of predictor to use.', max_length=50)),
                ('density_integration_regions', models.TextField(blank=True, help_text='Regions for density integration.')),
                ('fem_output', models.TextField(default='eigen_energies', help_text='Output options for FEM calculations.')),
                ('eigen_vector_output_points_file', models.CharField(blank=True, help_text='File containing points for eigenvector output.', max_length=255)),
                ('orthogonalize_interpolated_eigenvectors', models.BooleanField(default=False, help_text='Whether to orthogonalize interpolated eigenvectors.')),
                ('eigen_vectors_interpolated_points_shift', models.CharField(blank=True, help_text='Shift for interpolated eigenvector points.', max_length=100)),
                ('approx_module', models.CharField(blank=True, help_text='Approximation module to use.', max_length=100)),
                ('potential_type', models.CharField(default='from_poisson', help_text='Type of potential to use.', max_length=50)),
                ('tic_toc_name', models.CharField(default='schroFEM', help_text='Name for timing measurements.', max_length=100)),
                ('d1_domain', models.CharField(blank=True, help_text='1D domain for approximation.', max_length=100)),
                ('d2_domain', models.CharField(blank=True, help_text='2D domain for approximation.', max_length=100)),
                ('d1_eigensolver', models.CharField(blank=True, help_text='Eigensolver for 1D approximation.', max_length=50)),
                ('output_line_corners', models.TextField(blank=True, help_text='Corners of the output line for subband energies.')),
                ('number_of_output_points', models.IntegerField(blank=True, help_text='Number of output points for subband energies.', null=True)),
                ('active_regions', models.ManyToManyField(blank=True, to='regions.region')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='domains.domain')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NonlinearPoissonFEM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('type', models.CharField(choices=[('NonlinearPoissonFEM', 'NonlinearPoissonFEM'), ('EMSchrodingerFEM', 'EMSchrodingerFEM'), ('SemiclassicalFEM', 'SemiclassicalFEM')], max_length=100)),
                ('_disable_output', models.BooleanField(default=False)),
                ('_search_flag', models.IntegerField(default=2)),
                ('_trigger_flag', models.IntegerField(default=4)),
                ('CB_initial_shift', models.FloatField(default=0.1)),
                ('VB_initial_shift', models.FloatField(default=0.1)),
                ('Dirichlet_nodes_output', models.BooleanField(default=False)),
                ('Newton_step_only', models.BooleanField(default=False)),
                ('disable_init', models.BooleanField(default=False)),
                ('disable_output', models.BooleanField(default=False)),
                ('disable_reinit', models.BooleanField(default=False)),
                ('disable_reset_set', models.BooleanField(default=False)),
                ('disable_solve', models.BooleanField(default=False)),
                ('disable_step', models.BooleanField(default=False)),
                ('init', models.TextField(blank=True, default='')),
                ('output', models.TextField(blank=True, default='')),
                ('reinit', models.TextField(blank=True, default='')),
                ('solve', models.TextField(blank=True, default='')),
                ('step', models.TextField(blank=True, default='')),
                ('abs_tolerance', models.FloatField(default=1e-08, validators=[django.core.validators.MinValueValidator(0)])),
                ('atomistic_output', models.TextField(blank=True, default='')),
                ('average_over_cell', models.BooleanField(default=True)),
                ('boundary_condition', models.TextField(blank=True, null=True)),
                ('boundary_regions', models.TextField(blank=True, default='')),
                ('calculate_density_only', models.BooleanField(default=False)),
                ('charge_model', models.CharField(default='electron_hole', max_length=50)),
                ('chem_pot', models.FloatField(default=0.0)),
                ('confined_band_solvers', models.TextField(blank=True, default='')),
                ('constant_initial_potential', models.FloatField(default=0.0)),
                ('copy_solution_from', models.CharField(blank=True, max_length=100, null=True)),
                ('custom_convergence_test', models.BooleanField(default=False)),
                ('density_solver', models.TextField(blank=True, default='')),
                ('dependent_solvers', models.TextField(blank=True, default='')),
                ('do_input_initial_nonlinearpoisson_potential', models.BooleanField(default=False)),
                ('do_nonlinearpoisson_outputs_xyz_format', models.BooleanField(default=False)),
                ('do_output_nonlinearpoisson_potential', models.BooleanField(default=False)),
                ('do_output_potential_each_iteration', models.BooleanField(default=False)),
                ('do_outputs_from_density_solver', models.BooleanField(default=False)),
                ('equilibrium_el_chem_pot', models.FloatField(default=0.0)),
                ('external_object_name', models.TextField(blank=True, default='')),
                ('external_output', models.TextField(blank=True, default='')),
                ('external_solver', models.CharField(blank=True, max_length=100, null=True)),
                ('fem_output', models.CharField(blank=True, max_length=100, null=True)),
                ('field', models.FloatField(default=0.0)),
                ('friends', models.TextField(blank=True, default='')),
                ('full_Newton_step', models.BooleanField(default=False)),
                ('import_initial_potential_from_solver', models.BooleanField(default=False)),
                ('import_on_FEM_grid', models.BooleanField(default=False)),
                ('initial_potential_file_name', models.CharField(blank=True, max_length=100, null=True)),
                ('initial_potential_point', models.CharField(blank=True, max_length=100, null=True)),
                ('initial_potential_source', models.CharField(blank=True, max_length=100, null=True)),
                ('interpolation_power', models.IntegerField(default=2)),
                ('ksp_monitor', models.BooleanField(default=False)),
                ('ksp_type', models.CharField(default='gmres', max_length=50)),
                ('linear_solver_family', models.CharField(default='petsc', max_length=50)),
                ('linear_solver_maxit', models.IntegerField(default=0)),
                ('max_function_evals', models.IntegerField(default=1000)),
                ('max_iterations', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(1)])),
                ('max_nonlinear_step', models.FloatField(blank=True, null=True)),
                ('node_potential_output', models.BooleanField(default=False)),
                ('number_of_interpolation_points', models.IntegerField(default=4)),
                ('number_of_output_points', models.IntegerField(default=100)),
                ('one_dim_output', models.TextField(blank=True, default='')),
                ('one_dim_output_average', models.BooleanField(default=True)),
                ('output_at_each_iteration', models.BooleanField(default=False)),
                ('output_dependent_solvers', models.TextField(blank=True, default='')),
                ('output_file_suffix', models.CharField(blank=True, max_length=100, null=True)),
                ('output_jacobian', models.BooleanField(default=False)),
                ('output_line_corners', models.TextField(blank=True, default='')),
                ('output_norms', models.BooleanField(default=False)),
                ('output_residual', models.BooleanField(default=True)),
                ('output_yz_integrated_density', models.BooleanField(default=True)),
                ('pc_type', models.CharField(default='jacobi', max_length=50)),
                ('petsc_solver_algorithm', models.CharField(default='ls', max_length=50)),
                ('poisson_vtk_mesh', models.BooleanField(default=False)),
                ('potential_at_initial_point', models.FloatField(default=0.0)),
                ('rel_tolerance', models.FloatField(default=1e-06, validators=[django.core.validators.MinValueValidator(0)])),
                ('restart_data_input_file', models.CharField(blank=True, max_length=100, null=True)),
                ('restart_data_output_file', models.CharField(blank=True, max_length=100, null=True)),
                ('set_initial_field', models.BooleanField(default=False)),
                ('set_initial_potential', models.BooleanField(default=True)),
                ('shift_copied_solution_by_voltage', models.FloatField(default=0.0)),
                ('solve_on_single_replica', models.BooleanField(default=False)),
                ('solve_with_zero_density_first', models.BooleanField(default=False)),
                ('step_abs_tolerance', models.FloatField(default=1e-10)),
                ('step_rel_tolerance', models.FloatField(default=1e-10)),
                ('stop_if_diverged', models.BooleanField(default=True)),
                ('surface_of_regions', models.TextField(blank=True, default='')),
                ('tic_toc_name', models.CharField(blank=True, max_length=100, null=True)),
                ('tolerance_in_terms_of_doping', models.FloatField(default=0.0)),
                ('use_average_density_as_a_guess', models.BooleanField(default=False)),
                ('use_classical_jacobian', models.BooleanField(default=False)),
                ('active_regions', models.ManyToManyField(blank=True, to='regions.region')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='domains.domain')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SemiclassicalFEM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('type', models.CharField(choices=[('NonlinearPoissonFEM', 'NonlinearPoissonFEM'), ('EMSchrodingerFEM', 'EMSchrodingerFEM'), ('SemiclassicalFEM', 'SemiclassicalFEM')], max_length=100)),
                ('_disable_output', models.BooleanField(default=False)),
                ('_search_flag', models.IntegerField(default=2)),
                ('_trigger_flag', models.IntegerField(default=4)),
                ('dimension', models.IntegerField(default=3)),
                ('electron_chem_pot', models.FloatField(default=0.64)),
                ('electron_temperature', models.FloatField(default=1)),
                ('hole_chem_pot', models.FloatField(default=100)),
                ('hole_temperature', models.FloatField(default=1)),
                ('output_file_suffix', models.CharField(blank=True, max_length=100)),
                ('param_type', models.CharField(default='NEMO5', max_length=100)),
                ('tic_toc_name', models.CharField(default='full_semicl', max_length=100)),
                ('active_regions', models.ManyToManyField(blank=True, to='regions.region')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='domains.domain')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
